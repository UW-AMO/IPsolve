function [statesoln,time ] = RelaxedSingularSolver(A, D, hatw, n, m, N, lambda)
%RelaxedSingularSolver
    %This solves the optimization problem:
    %           min_z ||Dz||^2 + sqrt(lambda)||Az-hatw||^2
    %using LSQR
    %
    %n is the size of the state variable, m is the size of the measurments,
    %N is the total number of measurments
    %
    %statesoln is the state solution given in an n x N+1 matrix with
    %columns being the different states
    
[Dr, Dc] = size(D);

%stacking to make single term inside norm
Ourmat = A;
StackMat = [D; lam*Ourmat]; 
stackB = [zeros(Dr,1); lam*hatw];
[mMat, nMat] = size(StackMat);

%calling LSQR
tic
yRelax = lsqr(mMat,nMat, StackMat, stackB, 0, 1e-8, 1e-8,1e12, 1000, 1); 
time = toc;

soln = yRelax(1:Dr);

%extracting the states
Dstateblock = [sparse(n,n) sparse(n,m) speye(n,n)];
Dstate = blktridiag(Dstateblock,sparse(n, 2*n+m), sparse(n, 2*n+m),N);
Dstate = [speye(n,n) sparse(n, N*(2*n +m)); sparse(N*n, n) Dstate];
relaxsoln = Dstate*solnRelax;




end

